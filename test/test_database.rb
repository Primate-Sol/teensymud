# Code Generated by ZenTest v. 2.3.0
#                 classname: asrt / meth =  ratio%
#                  Database:    0 /   10 =   0.00%

unless defined? $ZENTEST and $ZENTEST
require 'test/unit'
require 'db/database'
require 'flexmock'
require 'ostruct'
require 'db/player'
require 'db/room'
end

class TestDatabase < Test::Unit::TestCase
  def setup
    @log = FlexMock.new
    @log.mock_handle(:info) { |msg| puts msg }
    @log.mock_handle(:debug) { |msg| puts msg }
    @log.mock_handle(:warn) { |msg| puts msg }
    @log.mock_handle(:error) { |msg| puts msg }
    myopts = OpenStruct.new
    myopts.dbname = "testdb"
    @db = Database.new(@log, myopts)
    $engine = FlexMock.new
    $engine.mock_handle(:world) {$engine}
    $engine.mock_handle(:options) {$engine}
    $engine.mock_handle(:home) {1}
    $engine.mock_handle(:db) {@db}
    @r = Room.new("Here")
    @o = GameObject.new("Thing")
    @p = Player.new("Tyche", "tyche", nil)
  end

  def teardown
    File.delete("testdb")
  end

  def test_delete
    assert_equal(@r, @db.delete(@r))
    assert_equal(@o, @db.delete(@o))
    assert_equal(@p, @db.delete(@p))
  end

  def test_find_player_by_name
    raise NotImplementedError, 'Need to write test_find_player_by_name'
  end

  def test_get
    raise NotImplementedError, 'Need to write test_get'
  end

  def test_getid
    assert_equal(5,@db.getid)
  end

  def test_objects
    raise NotImplementedError, 'Need to write test_objects'
  end

  def test_players_connected
    raise NotImplementedError, 'Need to write test_players_connected'
  end

  def test_put
    raise NotImplementedError, 'Need to write test_put'
  end

  def test_save
    raise NotImplementedError, 'Need to write test_save'
  end

  def test_stats
    raise NotImplementedError, 'Need to write test_stats'
  end
end

# Number of errors detected: 1
