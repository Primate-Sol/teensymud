# Code Generated by ZenTest v. 2.3.0
#                 classname: asrt / meth =  ratio%
#                  Database:   27 /   10 = 270.00%

unless defined? $ZENTEST and $ZENTEST
require 'test/unit'
require 'configuration'
require 'log'
require 'db/database'
require 'flexmock'
require 'db/properties'
require 'db/player'
require 'db/room'
end

class TestDatabase < Test::Unit::TestCase
  configuration

  def setup
    @db = Database.new
    $engine = FlexMock.new
    $engine.mock_handle(:world) {$engine}
    $engine.mock_handle(:db) {@db}
    @r = Room.new("Here")
    @o = GameObject.new("Thing")
    @p = Player.new("Tyche", "tyche", nil)
  end

  def teardown
    case options['dbtype']
    when :yaml
      File.delete("#{options['dbfile']}.yaml")
    when :sdbm
      File.delete("#{options['dbfile']}.dir")
      File.delete("#{options['dbfile']}.pag")
    when :gdbm
      File.delete("#{options['dbfile']}.gdbm")
    when :dbm
      File.delete("#{options['dbfile']}.db")
    end
  end

  def test_delete
    assert_equal(@r, @db.put(@r))
    assert_equal(@o, @db.put(@o))
    assert_equal(@r, @db.delete(@r.id))
    assert_equal(@o, @db.delete(@o.id))
    assert_equal(nil, @db.delete(@p.id))
  end

  def test_find_player_by_name
    assert_equal(@p, @db.put(@p))
    assert_equal(@p, @db.find_player_by_name("Tyche"))
    assert_equal(nil, @db.find_player_by_name("Bubba"))
  end

  def test_get
    assert_equal(@r, @db.put(@r))
    assert_equal(@o, @db.put(@o))
    assert_equal(@r, @db.get(@r.id))
    assert_equal(@o, @db.get(@o.id))
    assert_equal(nil, @db.get(@p.id))
  end

  def test_getid
    assert_equal(5,@db.getid)
  end

  def test_objects
    assert_equal(@r, @db.put(@r))
    assert_equal(@o, @db.put(@o))
    assert_equal(@p, @db.put(@p))
    cnt = 0
    @db.objects {cnt += 1}
    assert_equal(4,cnt)
  end

  def test_players_connected
    assert(@db.players_connected)
  end

  def test_put
    assert_equal(@r, @db.put(@r))
    assert_equal(@o, @db.put(@o))
    assert_equal(@p, @db.put(@p))
  end

  def test_save
    assert(@db.save)
  end

  def test_stats
    assert_equal(@r, @db.put(@r))
    assert_equal(@o, @db.put(@o))
    assert_equal(@p, @db.put(@p))
    stats=<<EOH
[COLOR=cyan]
---* Database Statistics *---
  Rooms   - 2
  Players - 1
  Objects - 1
  Total Objects - 4
  Highest OID in use - 4
---*                     *---
[/COLOR]
EOH
    assert_equal(stats,@db.stats)
  end
end

