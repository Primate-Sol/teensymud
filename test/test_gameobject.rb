# Code Generated by ZenTest v. 2.4.0
#                 classname: asrt / meth =  ratio%
#                GameObject:   34 /   13 = 261.54%

unless defined? $ZENTEST and $ZENTEST
require 'test/unit'
require 'flexmock'
class Engine
  @@mock = FlexMock.new
  @@mock.mock_handle(:db) {@@mock}
  @@mock.mock_handle(:getid) {$id += 1}
  @@mock.mock_handle(:mark) {}
  @@mock.mock_handle(:get) do |oid|
    case oid
    when 0 then @@mock
    when 1 then $r
    when 2 then $p
    when 3 then $o
    end
  end
  @@mock.mock_handle(:put) {true}
  @@mock.mock_handle(:delete) {true}
  @@mock.mock_handle(:eventmgr) {@@mock}
  @@mock.mock_handle(:add_event) {true}
  @@mock.mock_handle(:ocmds) {@@mock}
  @@mock.mock_handle(:find) {[]}
  def self.instance
    @@mock
  end
end
require 'storage/properties'
require 'core/gameobject'
require 'core/player'
require 'core/room'
end

class TestGameObject < Test::Unit::TestCase

  def setup
    $id = 0
    @r = Room.new("Here",0)
    $r = @r
    @p = Player.new("Tyche","tyche",nil)
    $p = @p
    @o = GameObject.new("Thing",0)
    $o = @o
  end

  def test_add_contents
    assert_equal([17],@o.add_contents(17))
  end

  def test_add_trigger
    m = FlexMock.new
    m.mock_handle(:event) {:describe}
    assert_equal(m,@o.add_trigger(m))
  end

  def test_ass
    k = [:describe,:describe,:get,:get,:drop,:drop,:timer,:timer,:foobar]
    m = FlexMock.new
    m.mock_handle(:kind) {k.shift}
    m.mock_handle(:from) {2}
    assert_equal([3],@r.add_contents(3))
    assert_equal(1,@o.location=1)
    assert(@o.ass(m))
    assert(@o.ass(m))
    assert(@o.ass(m))
    assert(@o.ass(m))
    assert_equal(nil,@o.ass(m))
  end

  def test_contents
    assert_equal([2],@r.contents)
  end

  def test_contents_equals
    assert_respond_to(@o, :contents=)
  end

  def test_delete_contents
    assert_equal([7],@o.add_contents(7))
    assert_equal(7,@o.delete_contents(7))
  end

  def test_delete_trigger
    m = FlexMock.new
    m.mock_handle(:event) {:describe}
    assert_equal(m,@o.add_trigger(m))
    assert_equal(m,@o.delete_trigger(:describe))
  end

  def test_fart
    m = FlexMock.new
    m.mock_handle(:kind) {1}
    assert(@o.fart(m))
  end

  def test_triggers
    assert_respond_to(@o, :triggers)
  end

  def test_triggers_equals
    assert_respond_to(@o, :triggers=)
  end

  def test_get_contents
    assert_equal([7],@o.add_contents(7))
    assert_equal([7],@o.get_contents)
  end

  def test_get_trigger
    m = FlexMock.new
    m.mock_handle(:event) {:describe}
    assert_equal(m,@o.add_trigger(m))
    assert_equal(m,@o.get_trigger("describe"))
  end

  def test_get_triggers
    assert_equal([],@o.get_triggers)
    m = FlexMock.new
    m.mock_handle(:event) {:describe}
    assert_equal(m,@o.add_trigger(m))
    assert_equal([m],@o.get_triggers)
  end

  def test_location
    assert_equal(nil,@o.location)
    assert_equal(2,@o.location=2)
    assert_equal(2,@o.location)
  end

  def test_location_equals
    assert_equal(1,@o.location=1)
  end

  def test_log
    assert_respond_to(@o, :log)
  end

  def test_objects
    assert(@o.objects)
  end

  def test_id
    assert_equal(3,@o.id)
  end

  def test_parse
    m = FlexMock.new
    assert_equal(false,@o.parse(m))
  end

  def test_players
    assert(@o.players)
  end

end

