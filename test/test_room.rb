# Code Generated by ZenTest v. 2.3.0
#                 classname: asrt / meth =  ratio%
#                      Room:    9 /    2 = 450.00%

unless defined? $ZENTEST and $ZENTEST
require 'test/unit'
require 'flexmock'
class Engine
  @@mock = FlexMock.new
  @@mock.mock_handle(:db) {@@mock}
  @@mock.mock_handle(:getid) {$id += 1}
  @@mock.mock_handle(:mark) {}
  @@mock.mock_handle(:get) do |oid|
    case oid
    when 0 then @@mock
    when 1 then $r
    when 2 then $r2
    end
  end
  @@mock.mock_handle(:put) {true}
  @@mock.mock_handle(:delete) {true}
  @@mock.mock_handle(:eventmgr) {@@mock}
  @@mock.mock_handle(:add_event) {true}
  @@mock.mock_handle(:ocmds) {@@mock}
  @@mock.mock_handle(:find) {[]}
  def self.instance
    @@mock
  end
end
require 'storage/properties'
require 'core/room'
require 'core/player'
end

class TestRoom < Test::Unit::TestCase
  def setup
    $id = 0
    @r = Room.new("Here",0)
    $r = @r
    @r2 = Room.new("There",0)
    $r2 = @r2
  end

  def test_ass
    k = [:describe,:describe,:describe_exits,:describe_exits,:leave,:leave,
      :arrive,:arrive,:timer,:timer,:timer,:foobar]
    m = FlexMock.new
    m.mock_handle(:kind) {k.shift}
    m.mock_handle(:from) {1}
    m.mock_handle(:msg) {2}
    assert(@r.ass(m))
    assert(@r.ass(m))
    assert(@r.ass(m))
    assert(@r.ass(m))
    assert(@r.ass(m))
    assert_equal(nil,@r.ass(m))
  end

  def test_exits
    assert_equal({},@r.exits)
  end

  def test_exits_equals
    assert_equal({1,1},@r.exits={1,1})
  end

  def test_log
    assert_respond_to(@r, :log)
  end

end

