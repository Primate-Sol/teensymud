# Code Generated by ZenTest v. 2.4.0
#                 classname: asrt / meth =  ratio%
#                    Player:   18 /    9 = 200.00%

unless defined? $ZENTEST and $ZENTEST
require 'test/unit'
require 'flexmock'
load 'mockengine.rb'
require 'storage/properties'
require 'core/player'
require 'core/room'
end

class TestPlayer < Test::Unit::TestCase
  def setup
    $id = 0
    @r = Room.new("Here",0)
    $r = @r
    @p = Player.new("Tyche","tyche",nil)
    $p = @p
  end

  def test_describe
    m = FlexMock.new
    m.mock_handle(:kind) {:describe}
    m.mock_handle(:from) {9}
    m.mock_handle(:msg) {}
    assert(@p.describe(m))
  end

  def test_show
    m = FlexMock.new
    m.mock_handle(:kind) {:describe}
    m.mock_handle(:from) {9}
    m.mock_handle(:msg) {}
    assert(!@p.show(m))
  end

  def test_check_passwd
    assert_equal(true, @p.check_passwd("tyche"))
    assert_equal(false, @p.check_passwd("blah"))
  end

  def test_color
    assert_equal(false,@p.color)
  end

  def test_color_equals
    assert_equal(true,@p.color=true)
  end

  def test_disconnect
    assert_equal(nil,@p.disconnect)
  end

  def test_log
    assert_respond_to(@p, :log)
  end

  def test_parse
    assert_equal(nil,@p.parse("hello"))
  end

  def test_passwd
    assert_respond_to(@p, :passwd)
  end

  def test_passwd_equals
    assert_respond_to(@p, :passwd=)
  end

  def test_prompt
    assert_respond_to(@p, :prompt)
  end

  def test_sendto
    assert_equal(nil,@p.sendto("hello"))
  end

  def test_session
    assert_equal(nil,@p.session)
  end

  def test_session_equals
    assert_equal(5,@p.session=5)
  end

  def test_update
    m = FlexMock.new
    assert(@p.update(m))
  end
end

