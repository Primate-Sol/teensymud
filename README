= TeensyMUD Server
= v2.7.0

---
== Introduction
TeensyMUD is a very simple mud server written in Ruby.  It uses a multiplexed single-threaded network driver using Acceptor/Reactor and Observer patterns and YAML formatted text files as a database.  It is also a pure event driven system where all game objects communicate with each other via events.  

This server was initially created in response to an Aprils Fool's joke posted by Erwin Andreasen on TheMudConnector forum announcing a 1K mud contest.  Those obfuscated versions can be found in the repository.

Does TeensyMUD have a future?  Who knows?  I don't.

== Download
The latest release can be found at http://teensymud.kicks-ass.org

== System Dependencies
=== Required
[Ruby 1.8.2] Can be obtained at the home of Ruby, http://www.ruby-lang.org.  It runs on most platforms.
[Log4r] All logging done through this now. Install from Ruby Gems, or http://log4r.sourceforge.net/ 

=== Optional
[RubyGems] To install rake and various things.  See - http://rubyforge.org/projects/rubygems
[Rake] To build documentation, run tests, etc.  See - http://rake.rubyforge.org
[Racc] To rebuild FARTS parser.  Ruby comes with Racc runtime so this is not needed for execution. See - http://i.loveruby.net/en/prog/racc.html
[FlexMock] To run regression tests.  See - http://onestepback.org/software/flexmock/
[Curses] To run tclient in curses mode under windows.  The Windows one-click installer is missing the pdcurses.dll, or if you built it yourself from source the curses.so extension probably wasn't built.  You can get binaries for it at http://www.dave.burt.id.au/ruby/curses.zip.  The pdcurses.dll should be placed in your ruby\bin directory and not your windows directories.   See http://jarp.does.notwork.org/win32/ for the sources.

== Features
* Multiplexed single-threaded network driver using Acceptor/Reactor and Observer patterns.
* Supports multiple users
* Global chat
* Virtual world (room system with unlimited exits)
* Player movement
* Player has inventory
* Player can get and drop objects
* Help system 
* World is persistent
* OLC for rooms and objects
* Offline creation in friendly markup language
* Sexy features like autolook and autoexits
* Portable - runs on Unix, OS/X, Windows
* Documentation - see 'doc/index.html' in distro
* More extras!!! Comes with mini-distro builder utility (see 'rakefile package')
* Color and highlighting using BBCODE markup.
* Secure login
* Turn based combat featuring link death and link suicide. 
* Runtime extensible commands.  Add new commands with rebooting.
* Completely event-driven system.  All first class game objects communicate with each other via TITS (Tyche's Immediate Temporality System).
* Object level event programming using FARTS (Functional Automated Response Trigger System). See link:files/farts_grammar.html
* Hamster powered servo timer issues events to interested objects at predefined intervals.
* Implements TELNET protocol include NAWS, TTYPE, ECHO, SGA, and BINARY options.
* NOSY logging. 
* TeensyClient a barebones client that runs as console or curses application.
* VT100 support
* Exhaustive regression testing.
* Database backends, DBM, GDBM and SDBM.
* Object cacheing support
* Object ownership
* New logging system controlled at the class level
* Configuration support.  Configuration information stored in easily readable file.
* Object properties.  Properties define attributes that are persistent.  Set them and forget them. 


---
== Installation

1. $ tar xzvf tmud*
2. $ cd tmud*
3. $ ruby tmud.rb

That's it.  It will boot on port 4000 and build an initial database in the db directory. 

== Operation
* CTL-C  - Will shut down the server
* quit   - Will disconnect your session
* help   - Prints a brief description of the commands

== Help 
- look       - displays the contents of a room
- chat       - sends <message> to all players in the game
- !          - displays <message> to all players in the room
- quit       - quits the game (saves player)
- help       - displays help
- @object    - creates a new object (ex. @object rose)
- @reload    - reloads the command table
- get        - gets all objects in the room into your inventory
- @fart      - adds or deletes a farts trigger to an object
        Syntax:
                @fart add #<oid> <progname> <eventtype>
                @fart del #<oid> <eventtype>
                @fart show #<oid>
                (ex. @fart add #1 myprog arrive)
- examine    - displays the contents of a room
- "          - sends <message> to all players in the room
- go         - go through the exit specified (ex. go west)
- @echoat    - echos input to location
- say        - sends <message> to all players in the room
- kill       - attempts to kill player (e.g. kill Bubba)
- hello      - the hello social
- who        - shows a list of all connected players
- @room      - creates a new room and autolinks the exits using the exit names provided.
                 (ex. @room My Room north south)
- emote      - displays <message> to all players in the room
- @set       - sets the description or timer for an object
        Syntax:
                @set desc #<oid><description>
                @set timer #<oid> <on|off>
                (ex. @set desc #1 A beautiful rose.)
- ?          - displays help
- inventory  - displays player inventory
- drop       - drops all objects in your inventory into the room
- @stats     - displays a statistical report of the database and cache if present
- @color     - toggles colors on or off
- @status    - displays session information
- @memstats  - displays the memory statistics by scanning ruby's object space
- @dumpcache - inspects the cache (for debugging).

---
== Contributors
:include:CONTRIBUTORS

== License
:include:LICENSE

